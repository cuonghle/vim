let SessionLoad = 1
if &cp | set nocp | endif
let s:cpo_save=&cpo
set cpo&vim
inoremap <silent> <Plug>(neocomplcache_start_omni_complete) 
inoremap <silent> <Plug>(neocomplcache_start_auto_complete_no_select) 
inoremap <silent> <Plug>(neocomplcache_start_auto_complete) =neocomplcache#mappings#popup_post()
inoremap <silent> <expr> <Plug>(neocomplcache_start_unite_quick_match) unite#sources#neocomplcache#start_quick_match()
inoremap <silent> <expr> <Plug>(neocomplcache_start_unite_complete) unite#sources#neocomplcache#start_complete()
imap <S-Tab> <Plug>SuperTabBackward
inoremap <C-Tab> 	
inoremap <silent> <Plug>NERDCommenterInsert  <BS>:call NERDComment('i', "insert")
inoremap <silent> <expr> <Plug>(neosnippet_start_unite_snippet) unite#sources#neosnippet#start_complete()
inoremap <silent> <expr> <Plug>(neosnippet_jump) neosnippet#mappings#jump_impl()
inoremap <silent> <expr> <Plug>(neosnippet_expand) neosnippet#mappings#expand_impl()
inoremap <silent> <expr> <Plug>(neosnippet_jump_or_expand) neosnippet#mappings#jump_or_expand_impl()
inoremap <silent> <expr> <Plug>(neosnippet_expand_or_jump) neosnippet#mappings#expand_or_jump_impl()
inoremap <silent> <expr> <Plug>delimitMateS-BS delimitMate#WithinEmptyPair() ? "\<Del>" : "\<S-BS>"
inoremap <silent> <Plug>delimitMateBS =delimitMate#BS()
inoremap <silent> <SNR>45_AutoPairsReturn =AutoPairsReturn()
imap <F2> :update
inoremap <expr> <BS> neocomplcache#smart_close_popup()."\"
nmap v <Plug>SlimeConfig
nmap  <Plug>SlimeParagraphSend
xmap  <Plug>SlimeRegionSend
nmap  :tabp
map <NL> :normal V%,cc:normal $%
map  <Plug>(expand_region_shrink)
nmap  :tabn
xmap  <Plug>(neosnippet_expand_target)
smap  <Plug>(neosnippet_expand_or_jump)
nnoremap <silent>  :CtrlP
noremap  :later
map  :'q,'wy
map  :'q,'wd
nmap d :cs find d =expand("<cword>")	
nmap i :cs find i ^=expand("<cfile>")$
nmap f :cs find f =expand("<cfile>")	
nmap e :cs find e =expand("<cword>")	
nmap t :cs find t =expand("<cword>")	
nmap c :cs find c =expand("<cword>")	
nmap g :cs find g =expand("<cword>")	
nmap s :cs find s =expand("<cword>")	
nmap  :cstag =expand("<cword>")
nnoremap <expr>   IsFolded() ? 'zO' : 'zC'
map "" ysiw"
map '' ysiw'
vnoremap ,rem :RExtractMethod
vnoremap ,rriv :RRenameInstanceVariable
vnoremap ,rrlv :RRenameLocalVariable
vnoremap ,relv :RExtractLocalVariable
vnoremap ,rec :RExtractConstant
nnoremap ,riv :RIntroduceVariable
nnoremap ,rcpc :RConvertPostConditional
nnoremap ,rel :RExtractLet
nnoremap ,rit :RInlineTemp
nnoremap ,rapn :RAddParameterNB
nnoremap ,rap :RAddParameter
nmap ,ca <Plug>NERDCommenterAltDelims
xmap ,cu <Plug>NERDCommenterUncomment
nmap ,cu <Plug>NERDCommenterUncomment
xmap ,cb <Plug>NERDCommenterAlignBoth
nmap ,cb <Plug>NERDCommenterAlignBoth
xmap ,cc <Plug>NERDCommenterAlignLeft
nmap ,cc <Plug>NERDCommenterAlignLeft
nmap ,cA <Plug>NERDCommenterAppend
xmap ,cy <Plug>NERDCommenterYank
nmap ,cy <Plug>NERDCommenterYank
xmap ,cs <Plug>NERDCommenterSexy
nmap ,cs <Plug>NERDCommenterSexy
xmap ,ci <Plug>NERDCommenterInvert
nmap ,ci <Plug>NERDCommenterInvert
nmap ,c$ <Plug>NERDCommenterToEOL
xmap ,cn <Plug>NERDCommenterNested
nmap ,cn <Plug>NERDCommenterNested
xmap ,cm <Plug>NERDCommenterMinimal
nmap ,cm <Plug>NERDCommenterMinimal
xmap ,c  <Plug>NERDCommenterToggle
nmap ,c  <Plug>NERDCommenterToggle
xmap ,cl <Plug>NERDCommenterComment
nmap ,cl <Plug>NERDCommenterComment
xmap <silent> ,tt :call AlignMaps#Vis("tt")
nmap ,tt <Plug>AM_tt
xmap <silent> ,tsq :call AlignMaps#Vis("tsq")
nmap ,tsq <Plug>AM_tsq
xmap <silent> ,tsp :call AlignMaps#Vis("tsp")
nmap ,tsp <Plug>AM_tsp
xmap <silent> ,tml :call AlignMaps#Vis("tml")
nmap ,tml <Plug>AM_tml
xmap <silent> ,tab :call AlignMaps#Vis("tab")
nmap ,tab <Plug>AM_tab
xmap <silent> ,m= :call AlignMaps#Vis("m=")
nmap ,m= <Plug>AM_m=
xmap <silent> ,tW@ :call AlignMaps#Vis("tW@")
nmap ,tW@ <Plug>AM_tW@
xmap <silent> ,t@ :call AlignMaps#Vis("t@")
nmap ,t@ <Plug>AM_t@
xmap <silent> ,t~ :call AlignMaps#Vis("t~")
nmap ,t~ <Plug>AM_t~
xmap <silent> ,t? :call AlignMaps#Vis("t?")
nmap ,t? <Plug>AM_t?
xmap <silent> ,w= :call AlignMaps#Vis("w=")
nmap ,w= <Plug>AM_w=
xmap <silent> ,ts= :call AlignMaps#Vis("ts=")
nmap ,ts= <Plug>AM_ts=
xmap <silent> ,ts< :call AlignMaps#Vis("ts<")
nmap ,ts< <Plug>AM_ts<
xmap <silent> ,ts; :call AlignMaps#Vis("ts;")
nmap ,ts; <Plug>AM_ts;
xmap <silent> ,ts: :call AlignMaps#Vis("ts:")
nmap ,ts: <Plug>AM_ts:
xmap <silent> ,ts, :call AlignMaps#Vis("ts,")
nmap ,ts, <Plug>AM_ts,
xmap <silent> ,t= :call AlignMaps#Vis("t=")
nmap ,t= <Plug>AM_t=
xmap <silent> ,t< :call AlignMaps#Vis("t<")
nmap ,t< <Plug>AM_t<
xmap <silent> ,t; :call AlignMaps#Vis("t;")
nmap ,t; <Plug>AM_t;
xmap <silent> ,t: :call AlignMaps#Vis("t:")
nmap ,t: <Plug>AM_t:
xmap <silent> ,t, :call AlignMaps#Vis("t,")
nmap ,t, <Plug>AM_t,
xmap <silent> ,t# :call AlignMaps#Vis("t#")
nmap ,t# <Plug>AM_t#
xmap <silent> ,t :call AlignMaps#Vis("t")
nmap ,t <Plug>AM_t
xmap <silent> ,T~ :call AlignMaps#Vis("T~")
nmap ,T~ <Plug>AM_T~
xmap <silent> ,Tsp :call AlignMaps#Vis("Tsp")
nmap ,Tsp <Plug>AM_Tsp
xmap <silent> ,Tab :call AlignMaps#Vis("Tab")
nmap ,Tab <Plug>AM_Tab
xmap <silent> ,TW@ :call AlignMaps#Vis("TW@")
nmap ,TW@ <Plug>AM_TW@
xmap <silent> ,T@ :call AlignMaps#Vis("T@")
nmap ,T@ <Plug>AM_T@
xmap <silent> ,T? :call AlignMaps#Vis("T?")
nmap ,T? <Plug>AM_T?
xmap <silent> ,T= :call AlignMaps#Vis("T=")
nmap ,T= <Plug>AM_T=
xmap <silent> ,T< :call AlignMaps#Vis("T<")
nmap ,T< <Plug>AM_T<
xmap <silent> ,T; :call AlignMaps#Vis("T;")
nmap ,T; <Plug>AM_T;
xmap <silent> ,T: :call AlignMaps#Vis("T:")
nmap ,T: <Plug>AM_T:
xmap <silent> ,Ts, :call AlignMaps#Vis("Ts,")
nmap ,Ts, <Plug>AM_Ts,
xmap <silent> ,T, :call AlignMaps#Vis("T,")
nmap ,T, <Plug>AM_T,
xmap <silent> ,T# :call AlignMaps#Vis("T#")
nmap ,T# <Plug>AM_T#
xmap <silent> ,T :call AlignMaps#Vis("T")
nmap ,T <Plug>AM_T
map ,Htd <Plug>AM_Htd
xmap <silent> ,anum :call AlignMaps#Vis("anum")
nmap ,anum <Plug>AM_anum
xmap <silent> ,aenum :call AlignMaps#Vis("aenum")
nmap ,aenum <Plug>AM_aenum
xmap <silent> ,aunum :call AlignMaps#Vis("aunum")
nmap ,aunum <Plug>AM_aunum
xmap <silent> ,afnc :call AlignMaps#Vis("afnc")
nmap ,afnc <Plug>AM_afnc
xmap <silent> ,adef :call AlignMaps#Vis("adef")
nmap ,adef <Plug>AM_adef
xmap <silent> ,adec :call AlignMaps#Vis("adec")
nmap ,adec <Plug>AM_adec
xmap <silent> ,ascom :call AlignMaps#Vis("ascom")
nmap ,ascom <Plug>AM_ascom
xmap <silent> ,aocom :call AlignMaps#Vis("aocom")
nmap ,aocom <Plug>AM_aocom
xmap <silent> ,adcom :call AlignMaps#Vis("adcom")
nmap ,adcom <Plug>AM_adcom
xmap <silent> ,acom :call AlignMaps#Vis("acom")
nmap ,acom <Plug>AM_acom
xmap <silent> ,abox :call AlignMaps#Vis("abox")
nmap ,abox <Plug>AM_abox
xmap <silent> ,a( :call AlignMaps#Vis("a(")
nmap ,a( <Plug>AM_a(
xmap <silent> ,a= :call AlignMaps#Vis("a=")
nmap ,a= <Plug>AM_a=
xmap <silent> ,a< :call AlignMaps#Vis("a<")
nmap ,a< <Plug>AM_a<
xmap <silent> ,a, :call AlignMaps#Vis("a,")
nmap ,a, <Plug>AM_a,
xmap <silent> ,a? :call AlignMaps#Vis("a?")
nmap ,a? <Plug>AM_a?
map ,rwp <Plug>RestoreWinPosn
map ,swp <Plug>SaveWinPosn
nmap ,nn :set invnu
nmap ,ww :set invwrap
map ,ga :!egrep -n  %<Left><Left>
map ,gw mq:echo system("egrep -n \'" . expand("<cword>") . "\' " . expand("%") . " | head ")
map ,gg mq:echo system("egrep -n \'" . expand("<cWORD>") . "\' " . expand("%") . " | head ")
map ,dj :normal V%d
map ,yj :normal V%y
map ,gf :Gitv!
map ,fb "zyiw?\<z\>\|module\>\C
map ,ff "zyiw/\<z\>\|\<module\>\|\<endmodule\>\C
map ,gb :call ExecuteVCSCommand("VCSBlame")
map ,gl :call ExecuteVCSCommand("VCSLog")
map ,gi :call ExecuteVCSCommand("VCSCheckin")
map ,go :call ExecuteVCSCommand("VCSCheckout")
map ,gc :call ExecuteVCSCommand("VCSCreate"):bd:e
map ,gs :call ExecuteVCSCommand("VCSShow")
map ,gd :call ExecuteVCSCommand("VCSDiff")
map ,cd :lcd %:p:h
map ,nt :call CdToCurrentPath():NERDTreeFind
map ,b :'<,'>normal 
noremap ,0 :tablast
noremap ,9 9gt
noremap ,8 8gt
noremap ,7 7gt
noremap ,6 6gt
noremap ,5 5gt
noremap ,4 4gt
noremap ,3 3gt
noremap ,2 2gt
noremap ,1 1gt
nmap ,ta :tab sball
nmap ,os :so ~/.vim/session/
nmap ,ss :mksession! ~/.vim/session/
map ,as :call AlignMaps#Vis("tsp")
map ,a  :call AlignMaps#Vis("tsp")
map ,aa :Align 
map ,= :Align \s=\s
map ,mm :call ToggleMouseSetting()           
map ,ll :normal @e                           
nmap ,, V
nnoremap ,w :w
map ,fw "zyiw:Ack! z
map ,fa :Ack! 
vmap ,ww 
omap ,ww 
map -- yss-
map ;; mt])A;`t
map == =%
map K <Plug>(expand_region_expand)
xmap S <Plug>VSurround
vmap [% [%m'gv``
map \aa <Plug>VerilogEmacsAutoAdd
map \p <Plug>ToggleProject
vmap ]% ]%m'gv``
vmap a% [%v]%
nmap cs <Plug>Csurround
map cl :call ToggleCurrentLine()
nmap ds <Plug>Dsurround
nmap fd :cs find g =expand("<cword>")	
nmap fa :cs find s =expand("<cword>")	
nmap fs :cs find s =expand("<cword>")	
nmap fn :cstag =expand("<cword>")
map ft :CtrlPTag
map fm :CtrlPMRU
map fb :CtrlPBuffer
map ff :CtrlP
vmap fa :Ack! --ignore-dir verilogout --ignore-dir logs --ignore-dir reports --ignore-dir delivery --ignore-dir db --ignore-dir backup  "FIXME|TODO"
omap fa :Ack! --ignore-dir verilogout --ignore-dir logs --ignore-dir reports --ignore-dir delivery --ignore-dir db --ignore-dir backup  "FIXME|TODO"
nmap gx <Plug>NetrwBrowseX
xmap gS <Plug>VgSurround
nmap gf gf
noremap <expr> j ((line('.')==line('$'))?'':'j')
noremap <expr> k ((line('.')==1)?'':'k')
map tn :tabnew 
noremap u :earlier
nmap ySS <Plug>YSsurround
nmap ySs <Plug>YSsurround
nmap yss <Plug>Yssurround
nmap yS <Plug>YSurround
nmap ys <Plug>Ysurround
nnoremap <silent> <Plug>NetrwBrowseX :call netrw#NetrwBrowseX(expand("<cWORD>"),0)
nnoremap <silent> <Plug>SurroundRepeat .
xnoremap <silent> <Plug>(expand_region_shrink) :call expand_region#next('v', '-')
xnoremap <silent> <Plug>(expand_region_expand) :call expand_region#next('v', '+')
nnoremap <silent> <Plug>(expand_region_expand) :call expand_region#next('n', '+')
nnoremap <silent> <Plug>CVSWatchRemove :CVSWatch remove
nnoremap <silent> <Plug>CVSWatchOn :CVSWatch on
nnoremap <silent> <Plug>CVSWatchOff :CVSWatch off
nnoremap <silent> <Plug>CVSWatchAdd :CVSWatch add
nnoremap <silent> <Plug>CVSWatchers :CVSWatchers
nnoremap <silent> <Plug>CVSUnedit :CVSUnedit
nnoremap <silent> <Plug>CVSEditors :CVSEditors
nnoremap <silent> <Plug>CVSEdit :CVSEdit
nnoremap <silent> <Plug>VCSCheckout :VCSCheckout
nnoremap <silent> <Plug>VCSVimDiff :VCSVimDiff
nnoremap <silent> <Plug>VCSUpdate :VCSUpdate
nnoremap <silent> <Plug>VCSUnlock :VCSUnlock
nnoremap <silent> <Plug>VCSStatus :VCSStatus
nnoremap <silent> <Plug>VCSSplitAnnotate :VCSAnnotate!
nnoremap <silent> <Plug>VCSReview :VCSReview
nnoremap <silent> <Plug>VCSRevert :VCSRevert
nnoremap <silent> <Plug>VCSLog :VCSLog
nnoremap <silent> <Plug>VCSLock :VCSLock
nnoremap <silent> <Plug>VCSInfo :VCSInfo
nnoremap <silent> <Plug>VCSClearAndGotoOriginal :VCSGotoOriginal!
nnoremap <silent> <Plug>VCSGotoOriginal :VCSGotoOriginal
nnoremap <silent> <Plug>VCSDiff :VCSDiff
nnoremap <silent> <Plug>VCSDelete :VCSDelete
nnoremap <silent> <Plug>VCSCommit :VCSCommit
nnoremap <silent> <Plug>VCSAnnotate :VCSAnnotate
nnoremap <silent> <Plug>VCSAdd :VCSAdd
xnoremap <silent> <Plug>NERDCommenterUncomment :call NERDComment("x", "Uncomment")
nnoremap <silent> <Plug>NERDCommenterUncomment :call NERDComment("n", "Uncomment")
xnoremap <silent> <Plug>NERDCommenterAlignBoth :call NERDComment("x", "AlignBoth")
nnoremap <silent> <Plug>NERDCommenterAlignBoth :call NERDComment("n", "AlignBoth")
xnoremap <silent> <Plug>NERDCommenterAlignLeft :call NERDComment("x", "AlignLeft")
nnoremap <silent> <Plug>NERDCommenterAlignLeft :call NERDComment("n", "AlignLeft")
nnoremap <silent> <Plug>NERDCommenterAppend :call NERDComment("n", "Append")
xnoremap <silent> <Plug>NERDCommenterYank :call NERDComment("x", "Yank")
nnoremap <silent> <Plug>NERDCommenterYank :call NERDComment("n", "Yank")
xnoremap <silent> <Plug>NERDCommenterSexy :call NERDComment("x", "Sexy")
nnoremap <silent> <Plug>NERDCommenterSexy :call NERDComment("n", "Sexy")
xnoremap <silent> <Plug>NERDCommenterInvert :call NERDComment("x", "Invert")
nnoremap <silent> <Plug>NERDCommenterInvert :call NERDComment("n", "Invert")
nnoremap <silent> <Plug>NERDCommenterToEOL :call NERDComment("n", "ToEOL")
xnoremap <silent> <Plug>NERDCommenterNested :call NERDComment("x", "Nested")
nnoremap <silent> <Plug>NERDCommenterNested :call NERDComment("n", "Nested")
xnoremap <silent> <Plug>NERDCommenterMinimal :call NERDComment("x", "Minimal")
nnoremap <silent> <Plug>NERDCommenterMinimal :call NERDComment("n", "Minimal")
xnoremap <silent> <Plug>NERDCommenterToggle :call NERDComment("x", "Toggle")
nnoremap <silent> <Plug>NERDCommenterToggle :call NERDComment("n", "Toggle")
xnoremap <silent> <Plug>NERDCommenterComment :call NERDComment("x", "Comment")
nnoremap <silent> <Plug>NERDCommenterComment :call NERDComment("n", "Comment")
xnoremap <silent> <Plug>(neosnippet_register_oneshot_snippet) :call neosnippet#mappings#_register_oneshot_snippet()
xnoremap <silent> <Plug>(neosnippet_expand_target) :call neosnippet#mappings#_expand_target()
xnoremap <silent> <Plug>(neosnippet_get_selected_text) :call neosnippet#helpers#get_selected_text(visualmode(), 1)
snoremap <silent> <expr> <Plug>(neosnippet_jump) neosnippet#mappings#jump_impl()
snoremap <silent> <expr> <Plug>(neosnippet_expand) neosnippet#mappings#expand_impl()
snoremap <silent> <expr> <Plug>(neosnippet_jump_or_expand) neosnippet#mappings#jump_or_expand_impl()
snoremap <silent> <expr> <Plug>(neosnippet_expand_or_jump) neosnippet#mappings#expand_or_jump_impl()
nmap <Nul><Nul>d :vert scs find d =expand("<cword>")
nmap <Nul><Nul>i :vert scs find i ^=expand("<cfile>")$	
nmap <Nul><Nul>f :vert scs find f =expand("<cfile>")	
nmap <Nul><Nul>e :vert scs find e =expand("<cword>")
nmap <Nul><Nul>t :vert scs find t =expand("<cword>")
nmap <Nul><Nul>c :vert scs find c =expand("<cword>")
nmap <Nul><Nul>g :vert scs find g =expand("<cword>")
nmap <Nul><Nul>s :vert scs find s =expand("<cword>")
nmap <Nul>d :scs find d =expand("<cword>")	
nmap <Nul>i :scs find i ^=expand("<cfile>")$	
nmap <Nul>f :scs find f =expand("<cfile>")	
nmap <Nul>e :scs find e =expand("<cword>")	
nmap <Nul>t :scs find t =expand("<cword>")	
nmap <Nul>c :scs find c =expand("<cword>")	
nmap <Nul>g :scs find g =expand("<cword>")	
nmap <Nul>s :scs find s =expand("<cword>")	
nmap <SNR>43_WE <Plug>AlignMapsWrapperEnd
map <SNR>43_WS <Plug>AlignMapsWrapperStart
nmap <silent> <Plug>RestoreWinPosn :call RestoreWinPosn()
nmap <silent> <Plug>SaveWinPosn :call SaveWinPosn()
map <F10> 
map <F9> 
map <F2> :update
vmap <F8> '>jVg_%
nmap <F8> :call SlimeConnectOrSend()
omap <F8> :call SlimeConnectOrSend()
noremap <F5> :e
inoremap <expr>  neocomplcache#cancel_popup()
imap S <Plug>ISurround
imap s <Plug>Isurround
inoremap <expr>  neocomplcache#undo_completion()
inoremap <expr>  neocomplcache#smart_close_popup()."\"
imap 	 <Plug>SuperTabForward
inoremap <expr> <NL> pumvisible() ? "\" : "\<Down>"
inoremap <expr>  pumvisible() ? "\" : "\<Up>"
imap  <Plug>(neosnippet_expand_or_jump)
imap  <Plug>Isurround
inoremap  u
inoremap <expr>  neocomplcache#close_popup()
imap ;; mt])A;`ta
cabbr gitv =(getcmdtype()==':' && getcmdpos()==1 ? 'Gitv' : 'gitv')
let &cpo=s:cpo_save
unlet s:cpo_save
set autoindent
set autoread
set backspace=indent,eol,start
set complete=.,w,b,u,t
set completefunc=neocomplcache#complete#manual_complete
set completeopt=longest,menu,preview
set cscopeprg=/usr/bin/cscope
set cscopetag
set cscopeverbose
set dictionary=/usr/share/dict/words
set diffexpr=MyDiff()
set display=lastline
set expandtab
set fileencodings=ucs-bom,utf-8,latin1
set fileformats=unix,dos,mac
set foldlevelstart=0
set guicursor=n-v-c:block,o:hor50,i-ci:hor15,r-cr:hor30,sm:block,a:blinkon0
set helplang=en
set history=1000
set hlsearch
set ignorecase
set incsearch
set infercase
set isfname=@,48-57,/,.,-,_,#,$,%,~,=,{,},$
set laststatus=2
set listchars=tab:⇥\ ,trail:␣,extends:⇉,precedes:⇇,nbsp:·
set nrformats=hex
set path=.,/usr/include,,,.,~/bin,/proj/roadrr1/wa/quangp/,/proj/roadrr1/wa/quangp/design/iopads,/proj/roadrr1/wa/quangp/design/*/net,/proj/roadrr1/wa/quangp/design/top/sim/model,/proj/roadrr1/wa/CPU_SUBSYS/current_HHYLP1/design/hyperion_cpusubsys_core/top/net,/proj/roadrr1/wa/CPU_SUBSYS/current_HHYLP1/design/*/*,/proj/roadrr1/wa/TAPEOUT_R1P0/lib/verilog,/proj/roadrr1/libset/current_libset/vg/beh
set ruler
set runtimepath=~/.vim,~/.vim/bundle/AutoTag,~/.vim/bundle/ack,~/.vim/bundle/align,~/.vim/bundle/auto-pairs,~/.vim/bundle/cscope,~/.vim/bundle/ctrlp,~/.vim/bundle/delimitMate,~/.vim/bundle/gitv,~/.vim/bundle/lightline,~/.vim/bundle/misc,~/.vim/bundle/neocomplcache,~/.vim/bundle/neosnippet.vim-master,~/.vim/bundle/nerdcommenter,~/.vim/bundle/nerdtree,~/.vim/bundle/rainbow_parentheses,~/.vim/bundle/supertab,~/.vim/bundle/syntastic,~/.vim/bundle/syntaxcompletion,~/.vim/bundle/systemverilog,~/.vim/bundle/taglist,~/.vim/bundle/uvm-systemverilog,~/.vim/bundle/vcscommand,~/.vim/bundle/vim-addon-mw-utils-master,~/.vim/bundle/vim-dispatch,~/.vim/bundle/vim-endwise,~/.vim/bundle/vim-expand-region,~/.vim/bundle/vim-fugitive,~/.vim/bundle/vim-hybrid,~/.vim/bundle/vim-ruby,~/.vim/bundle/vim-ruby-refactoring,~/.vim/bundle/vim-sensible,~/.vim/bundle/vim-sleuth,~/.vim/bundle/vim-slime,~/.vim/bundle/vim-snippets-master,~/.vim/bundle/vim-surround,~/.vim/bundle/vimproc,/usr/share/vim/vimfiles,/usr/share/vim/vim72,/usr/share/vim/vimfiles/after,~/.vim/after
set scrolloff=5
set shiftround
set shiftwidth=4
set showcmd
set showmatch
set sidescrolloff=5
set smarttab
set softtabstop=4
set nostartofline
set suffixesadd=.v,.bv,.sv
set tabpagemax=50
set tabstop=4
set tags=./tags,./TAGS,tags,TAGS,/proj/roadrr1/wa/quangp/.dv_tags,/proj/roadrr1/wa/quangp/.libset_tags
set ttimeout
set ttimeoutlen=50
set viminfo=!,'100,<50,s10,h
set wildignore=*.a,*.o,*.bmp,*.gif,*.ico,*.jpg,*.png,.DS_Store,.git,.hg,.svn,*~,*.swp,*.tmp,*/tmp/*,*.so,*.swp,*.zip,^..*
set wildmenu
set wildmode=longest,full
let s:so_save = &so | let s:siso_save = &siso | set so=0 siso=0
let v:this_session=expand("<sfile>:p")
silent only
cd /mrvl2/ssoc389s/roadrr1/roadrr1/wa/quangp/design/top/primetime
if expand('%') == '' && !&modified && line('$') <= 1 && getline(1) == ''
  let s:wipebuf = bufnr('%')
endif
set shortmess=aoO
badd +0 scan_shift_compress_occ.rpt
badd +0 scripts/ROADRR_TOP_SoC_edt_shift_sdc.tcl
badd +0 scripts/chip_scan_clock.tcl
args scan_shift_compress_occ.rpt
edit scripts/chip_scan_clock.tcl
set splitbelow splitright
wincmd _ | wincmd |
split
wincmd _ | wincmd |
split
2wincmd k
wincmd w
wincmd w
set nosplitbelow
set nosplitright
wincmd t
set winheight=1 winwidth=1
exe '1resize ' . ((&lines * 21 + 33) / 67)
exe '2resize ' . ((&lines * 21 + 33) / 67)
exe '3resize ' . ((&lines * 21 + 33) / 67)
argglobal
let s:cpo_save=&cpo
set cpo&vim
inoremap <buffer> <silent> <BS> =AutoPairsDelete()
imap <buffer> <S-BS> <Plug>delimitMateS-BS
noremap <buffer> <silent>  :call AutoPairsToggle()
inoremap <buffer> <silent> î :call AutoPairsJump()a
inoremap <buffer> <silent> å =AutoPairsFastWrap()
imap <buffer> <silent> g <Plug>delimitMateJumpMany
inoremap <buffer> <silent>  =AutoPairsDelete()
inoremap <buffer> <silent> <expr>  AutoPairsToggle()
inoremap <buffer> <silent>  =AutoPairsBackInsert()
inoremap <buffer> <silent>   =AutoPairsSpace()
inoremap <buffer> <silent> " =AutoPairsInsert('"')
inoremap <buffer> <silent> ' =AutoPairsInsert('''')
inoremap <buffer> <silent> ( =AutoPairsInsert('(')
inoremap <buffer> <silent> ) =AutoPairsInsert(')')
noremap <buffer> <silent> î :call AutoPairsJump()
inoremap <buffer> <silent> [ =AutoPairsInsert('[')
inoremap <buffer> <silent> ] =AutoPairsInsert(']')
inoremap <buffer> <silent> ` =AutoPairsInsert('`')
inoremap <buffer> <silent> { =AutoPairsInsert('{')
inoremap <buffer> <silent> } =AutoPairsInsert('}')
let &cpo=s:cpo_save
unlet s:cpo_save
setlocal keymap=
setlocal noarabic
setlocal autoindent
setlocal nobinary
setlocal bufhidden=
setlocal buflisted
setlocal buftype=
setlocal nocindent
setlocal cinkeys=0{,0},0),:,0#,!^F,o,O,e
setlocal cinoptions=
setlocal cinwords=if,else,while,do,for,switch
setlocal comments=s1:/*,mb:*,ex:*/,://,b:#,:%,:XCOMM,n:>,fb:-
setlocal commentstring=/*%s*/
setlocal complete=.,w,b,u,t
setlocal completefunc=neocomplcache#complete#manual_complete
setlocal nocopyindent
setlocal nocursorcolumn
set cursorline
setlocal cursorline
setlocal define=
setlocal dictionary=
setlocal nodiff
setlocal equalprg=
setlocal errorformat=
setlocal expandtab
if &filetype != 'tcl'
setlocal filetype=tcl
endif
setlocal foldcolumn=0
setlocal foldenable
setlocal foldexpr=0
setlocal foldignore=#
setlocal foldlevel=0
setlocal foldmarker={{{,}}}
setlocal foldmethod=manual
setlocal foldminlines=1
setlocal foldnestmax=20
setlocal foldtext=foldtext()
setlocal formatexpr=
setlocal formatoptions=tcq
setlocal formatlistpat=^\\s*\\d\\+[\\]:.)}\\t\ ]\\s*
setlocal grepprg=
setlocal iminsert=0
setlocal imsearch=0
setlocal include=
setlocal includeexpr=
setlocal indentexpr=GetTclIndent()
setlocal indentkeys=0{,0},!^F,o,O,e
setlocal infercase
setlocal iskeyword=@,48-57,_,192-255
setlocal keywordprg=
setlocal nolinebreak
setlocal nolisp
setlocal nolist
setlocal makeprg=
setlocal matchpairs=(:),{:},[:]
setlocal modeline
setlocal modifiable
setlocal nrformats=hex
set number
setlocal number
setlocal numberwidth=4
setlocal omnifunc=
setlocal path=
setlocal nopreserveindent
setlocal nopreviewwindow
setlocal quoteescape=\\
setlocal readonly
setlocal norightleft
setlocal rightleftcmd=search
setlocal noscrollbind
setlocal shiftwidth=2
setlocal noshortname
setlocal nosmartindent
setlocal softtabstop=4
setlocal nospell
setlocal spellcapcheck=[.?!]\\_[\\])'\"\	\ ]\\+
setlocal spellfile=
setlocal spelllang=en
setlocal statusline=
setlocal suffixesadd=.v,.bv,.sv
setlocal swapfile
setlocal synmaxcol=3000
if &syntax != 'tcl'
setlocal syntax=tcl
endif
setlocal tabstop=4
setlocal tags=
setlocal textwidth=0
setlocal thesaurus=
setlocal nowinfixheight
setlocal nowinfixwidth
set nowrap
setlocal nowrap
setlocal wrapmargin=0
silent! normal! zE
let s:l = 5 - ((4 * winheight(0) + 10) / 21)
if s:l < 1 | let s:l = 1 | endif
exe s:l
normal! zt
5
normal! 016l
wincmd w
argglobal
edit scripts/ROADRR_TOP_SoC_edt_shift_sdc.tcl
let s:cpo_save=&cpo
set cpo&vim
inoremap <buffer> <silent> <BS> =AutoPairsDelete()
imap <buffer> <S-BS> <Plug>delimitMateS-BS
noremap <buffer> <silent>  :call AutoPairsToggle()
inoremap <buffer> <silent> î :call AutoPairsJump()a
inoremap <buffer> <silent> å =AutoPairsFastWrap()
imap <buffer> <silent> g <Plug>delimitMateJumpMany
inoremap <buffer> <silent>  =AutoPairsDelete()
inoremap <buffer> <silent> <expr>  AutoPairsToggle()
inoremap <buffer> <silent>  =AutoPairsBackInsert()
inoremap <buffer> <silent>   =AutoPairsSpace()
inoremap <buffer> <silent> " =AutoPairsInsert('"')
inoremap <buffer> <silent> ' =AutoPairsInsert('''')
inoremap <buffer> <silent> ( =AutoPairsInsert('(')
inoremap <buffer> <silent> ) =AutoPairsInsert(')')
noremap <buffer> <silent> î :call AutoPairsJump()
inoremap <buffer> <silent> [ =AutoPairsInsert('[')
inoremap <buffer> <silent> ] =AutoPairsInsert(']')
inoremap <buffer> <silent> ` =AutoPairsInsert('`')
inoremap <buffer> <silent> { =AutoPairsInsert('{')
inoremap <buffer> <silent> } =AutoPairsInsert('}')
let &cpo=s:cpo_save
unlet s:cpo_save
setlocal keymap=
setlocal noarabic
setlocal autoindent
setlocal nobinary
setlocal bufhidden=
setlocal buflisted
setlocal buftype=
setlocal nocindent
setlocal cinkeys=0{,0},0),:,0#,!^F,o,O,e
setlocal cinoptions=
setlocal cinwords=if,else,while,do,for,switch
setlocal comments=s1:/*,mb:*,ex:*/,://,b:#,:%,:XCOMM,n:>,fb:-
setlocal commentstring=/*%s*/
setlocal complete=.,w,b,u,t
setlocal completefunc=neocomplcache#complete#manual_complete
setlocal nocopyindent
setlocal nocursorcolumn
set cursorline
setlocal cursorline
setlocal define=
setlocal dictionary=
setlocal nodiff
setlocal equalprg=
setlocal errorformat=
setlocal noexpandtab
if &filetype != 'tcl'
setlocal filetype=tcl
endif
setlocal foldcolumn=0
setlocal foldenable
setlocal foldexpr=0
setlocal foldignore=#
setlocal foldlevel=0
setlocal foldmarker={{{,}}}
setlocal foldmethod=manual
setlocal foldminlines=1
setlocal foldnestmax=20
setlocal foldtext=foldtext()
setlocal formatexpr=
setlocal formatoptions=tcq
setlocal formatlistpat=^\\s*\\d\\+[\\]:.)}\\t\ ]\\s*
setlocal grepprg=
setlocal iminsert=0
setlocal imsearch=0
setlocal include=
setlocal includeexpr=
setlocal indentexpr=GetTclIndent()
setlocal indentkeys=0{,0},!^F,o,O,e
setlocal infercase
setlocal iskeyword=@,48-57,_,192-255
setlocal keywordprg=
setlocal nolinebreak
setlocal nolisp
setlocal nolist
setlocal makeprg=
setlocal matchpairs=(:),{:},[:]
setlocal modeline
setlocal modifiable
setlocal nrformats=hex
set number
setlocal number
setlocal numberwidth=4
setlocal omnifunc=
setlocal path=
setlocal nopreserveindent
setlocal nopreviewwindow
setlocal quoteescape=\\
setlocal readonly
setlocal norightleft
setlocal rightleftcmd=search
setlocal noscrollbind
setlocal shiftwidth=3
setlocal noshortname
setlocal nosmartindent
setlocal softtabstop=4
setlocal nospell
setlocal spellcapcheck=[.?!]\\_[\\])'\"\	\ ]\\+
setlocal spellfile=
setlocal spelllang=en
setlocal statusline=
setlocal suffixesadd=.v,.bv,.sv
setlocal swapfile
setlocal synmaxcol=3000
if &syntax != 'tcl'
setlocal syntax=tcl
endif
setlocal tabstop=4
setlocal tags=
setlocal textwidth=0
setlocal thesaurus=
setlocal nowinfixheight
setlocal nowinfixwidth
set nowrap
setlocal nowrap
setlocal wrapmargin=0
silent! normal! zE
let s:l = 37 - ((15 * winheight(0) + 10) / 21)
if s:l < 1 | let s:l = 1 | endif
exe s:l
normal! zt
37
normal! 019l
wincmd w
argglobal
edit scan_shift_compress_occ.rpt
let s:cpo_save=&cpo
set cpo&vim
inoremap <buffer> <silent> <BS> =AutoPairsDelete()
imap <buffer> <S-BS> <Plug>delimitMateS-BS
noremap <buffer> <silent>  :call AutoPairsToggle()
inoremap <buffer> <silent> î :call AutoPairsJump()a
inoremap <buffer> <silent> å =AutoPairsFastWrap()
imap <buffer> <silent> g <Plug>delimitMateJumpMany
inoremap <buffer> <silent>  =AutoPairsDelete()
inoremap <buffer> <silent> <expr>  AutoPairsToggle()
inoremap <buffer> <silent>  =AutoPairsBackInsert()
inoremap <buffer> <silent>   =AutoPairsSpace()
inoremap <buffer> <silent> " =AutoPairsInsert('"')
inoremap <buffer> <silent> ' =AutoPairsInsert('''')
inoremap <buffer> <silent> ( =AutoPairsInsert('(')
inoremap <buffer> <silent> ) =AutoPairsInsert(')')
noremap <buffer> <silent> î :call AutoPairsJump()
inoremap <buffer> <silent> [ =AutoPairsInsert('[')
inoremap <buffer> <silent> ] =AutoPairsInsert(']')
inoremap <buffer> <silent> ` =AutoPairsInsert('`')
inoremap <buffer> <silent> { =AutoPairsInsert('{')
inoremap <buffer> <silent> } =AutoPairsInsert('}')
let &cpo=s:cpo_save
unlet s:cpo_save
setlocal keymap=
setlocal noarabic
setlocal autoindent
setlocal nobinary
setlocal bufhidden=
setlocal buflisted
setlocal buftype=
setlocal nocindent
setlocal cinkeys=0{,0},0),:,0#,!^F,o,O,e
setlocal cinoptions=
setlocal cinwords=if,else,while,do,for,switch
setlocal comments=s1:/*,mb:*,ex:*/,://,b:#,:%,:XCOMM,n:>,fb:-
setlocal commentstring=/*%s*/
setlocal complete=.,w,b,u,t
setlocal completefunc=neocomplcache#complete#manual_complete
setlocal nocopyindent
setlocal nocursorcolumn
set cursorline
setlocal cursorline
setlocal define=
setlocal dictionary=
setlocal nodiff
setlocal equalprg=
setlocal errorformat=
setlocal expandtab
if &filetype != ''
setlocal filetype=
endif
setlocal foldcolumn=0
setlocal foldenable
setlocal foldexpr=0
setlocal foldignore=#
setlocal foldlevel=0
setlocal foldmarker={{{,}}}
setlocal foldmethod=manual
setlocal foldminlines=1
setlocal foldnestmax=20
setlocal foldtext=foldtext()
setlocal formatexpr=
setlocal formatoptions=tcq
setlocal formatlistpat=^\\s*\\d\\+[\\]:.)}\\t\ ]\\s*
setlocal grepprg=
setlocal iminsert=0
setlocal imsearch=0
setlocal include=
setlocal includeexpr=
setlocal indentexpr=
setlocal indentkeys=0{,0},:,0#,!^F,o,O,e
setlocal infercase
setlocal iskeyword=@,48-57,_,192-255
setlocal keywordprg=
setlocal nolinebreak
setlocal nolisp
setlocal nolist
setlocal makeprg=
setlocal matchpairs=(:),{:},[:]
setlocal modeline
setlocal modifiable
setlocal nrformats=hex
set number
setlocal number
setlocal numberwidth=4
setlocal omnifunc=syntaxcomplete#Complete
setlocal path=
setlocal nopreserveindent
setlocal nopreviewwindow
setlocal quoteescape=\\
setlocal noreadonly
setlocal norightleft
setlocal rightleftcmd=search
setlocal noscrollbind
setlocal shiftwidth=4
setlocal noshortname
setlocal nosmartindent
setlocal softtabstop=4
setlocal nospell
setlocal spellcapcheck=[.?!]\\_[\\])'\"\	\ ]\\+
setlocal spellfile=
setlocal spelllang=en
setlocal statusline=
setlocal suffixesadd=.v,.bv,.sv
setlocal swapfile
setlocal synmaxcol=3000
if &syntax != ''
setlocal syntax=
endif
setlocal tabstop=4
setlocal tags=
setlocal textwidth=0
setlocal thesaurus=
setlocal nowinfixheight
setlocal nowinfixwidth
set nowrap
setlocal nowrap
setlocal wrapmargin=0
silent! normal! zE
let s:l = 2814 - ((10 * winheight(0) + 10) / 21)
if s:l < 1 | let s:l = 1 | endif
exe s:l
normal! zt
2814
normal! 03l
wincmd w
exe '1resize ' . ((&lines * 21 + 33) / 67)
exe '2resize ' . ((&lines * 21 + 33) / 67)
exe '3resize ' . ((&lines * 21 + 33) / 67)
tabnext 1
if exists('s:wipebuf')
  silent exe 'bwipe ' . s:wipebuf
endif
unlet! s:wipebuf
set winheight=1 winwidth=20 shortmess=filnxtToO
let s:sx = expand("<sfile>:p:r")."x.vim"
if file_readable(s:sx)
  exe "source " . fnameescape(s:sx)
endif
let &so = s:so_save | let &siso = s:siso_save
doautoall SessionLoadPost
unlet SessionLoad
" vim: set ft=vim :
